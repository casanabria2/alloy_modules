declare "stack" {
  argument "secret_name" {
    comment = "The name of the secret to get the password from."
    default = "gc-password"
    optional = true
  }
  
  argument "nspect_id" {
    comment = "The nspect ID for the system we are collecting data from."
    optional = false
  }
  // In this case, we are getting the password from a Kubernetes secret, but this
  // could be any other source of secrets.

  // Get the configuration from the Kubernetes cluster
  remote.kubernetes.secret "gc_password" {
    namespace = "grafana"
    name = argument.secret_name.value
  }

  // Setup the prometheus remote write receiver
  // 

  prometheus.relabel "nspect_id" {
    forward_to = [ prometheus.remote_write.default.receiver ]
    
    rule {
      action = "replace"
      target_label = "nspect_id"
      replacement = argument.nspect_id.value
    }
  }

  prometheus.remote_write "default" {
      endpoint {
        url = "https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push"

        basic_auth {
          username = 1668483
          password = remote.kubernetes.secret.gc_password.data["password"]
        }
      }
  } 

  // Setup the loki write receiver
  // 
 loki.process "nspect_id" {
  stage.static_labels {
      values = {
        nspect_id = argument.nspect_id.value,
      }
    forward_to = [ loki.write.default.receiver ]
  } 
 }

  loki.write "default" {
    endpoint {
      url = "https://logs-prod-006.grafana.net/loki/api/v1/push"

      basic_auth {
        username = "934149"
        password = remote.kubernetes.secret.gc_password.data["password"]
      }
    }
  }

  // Export the receivers
  export "metrics" {
    value = prometheus.relabel.nspect_id.receiver
  }
  
  export "logs" {
    value = loki.process.nspect_id.receiver
 }

}